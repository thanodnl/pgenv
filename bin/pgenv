#!/bin/bash

# Released versions:
# 8.0.26
# 8.1.23
# 8.2.23
# 8.3.23
# 8.4.22
# 9.0.19
# 9.1.24
# 9.2.24
# 9.3.23
# 9.4.18
# 9.5.13
# 9.6.9
# 10.4
# 11beta2

# https://stackoverflow.com/a/19622569/79202
set -e

PGENV_ROOT=$(dirname $(dirname $0))
PGSQL=$PGENV_ROOT/pgsql
PG_DATA=$PGSQL/data
FLAG_FILE=$PGENV_ROOT/configure.flags

# Now -w because 9.0 and earlier always time out even when successful.
PG_CTL="$PGSQL/bin/pg_ctl -D $PG_DATA"
INITDB="$PGSQL/bin/initdb -U postgres --locale en_US.UTF-8 --encoding UNICODE -D $PG_DATA"

cd $PGENV_ROOT

pgversions() {
    if [ -e "pgsql" ]; then
        curr=$(readlink pgsql)
    fi
    for dir in $(ls | grep pgsql-); do
        if [ "$dir" = "$curr" ]; then
            echo "  *  $dir"
        else
            echo "     $dir"
        fi
    done
}

checkinstalled() {
    v=$1
    # Make sure it's a version we have.
    if [ ! -e "pgsql-$v" ]; then
        echo "PostgreSQL $v not installed; installed versions:"
        pgversions
        exit 1
    fi
}

switchversion() {
    v=$1
    # Check if current version?
    if [ "`readlink pgsql`" = "pgsql-$v" ]; then
        echo "Already using PostgreSQL $v"
    else
        # Shut down existing running instance.
        if [ -e "pgsql" ]; then
            if $PG_CTL status &> /dev/null; then
                $PG_CTL stop
            fi
        fi

        # Link the new instance.
        ln -nsf pgsql-$v pgsql
        echo "Switched PostgreSQL to $v"
    fi
}

pgenvhelp() {
        cat <<EOF
Usage: pgenv <command> [<args>]"

The pgenv commands are:
    switch    Set the current PostgreSQL version
    use       Set and start the current PostgreSQL version
    clear     Stop and unset the current PostgreSQL version
    start     Start the current PostgreSQL server
    stop      Stop the current PostgreSQL server
    restart   Restart the current PostgreSQL server
    build     Build a specific version of PostgreSQL
    remove    Remove a specific version of PostgreSQL
    version   Show the current PostgreSQL version
    versions  List all PostgreSQL versions available to pgenv
    help      Show this usage statement and command summary

For full documentation, see: https://github.com/theory/pgenv#readme
EOF
}

case $1 in
    switch)
        v=$2
        checkinstalled $v
        switchversion $v

        exit
        ;;
    use)
        v=$2
        checkinstalled $v
        switchversion $v

        # Init if needed.
        if [ ! -d $PG_DATA ]; then
            $INITDB
        fi

        # Start er up!
        if ! $PG_CTL status &> /dev/null; then
            $PG_CTL start -l $PG_DATA/server.log
            echo "PostgreSQL $v started"
        fi
        exit
        ;;

    start)
        # Do we have a current version?
        if [ ! -e "pgsql" ]; then
            echo "No current version of PostgreSQL"
            echo "Run \`pgenv use \$version\` to link and start a specific version"
            echo "Run \`pgenv versions\` to list all installed versions"
            exit 1
        fi

        # Just stop if already running.
        if $PG_CTL status &> /dev/null; then
            echo "PostgreSQL is already running"
            exit
        fi

        # Init the database if needed.
        if [ ! -d $PG_DATA ]; then
            $INITDB
        fi

        # Start er up!
        $PG_CTL start -l $PG_DATA/server.log
        echo "PostgreSQL $v started"
        exit
        ;;

    stop)
        # Shut down the server unless it's not running.
        if $PG_CTL status &> /dev/null; then
            $PG_CTL stop
            echo "PostgreSQL stopped"
        else
            echo "PostgreSQL not running"
        fi
        exit
        ;;

    restart)
        # Shut down the server unless it's not running.
        if $PG_CTL status &> /dev/null; then
            $PG_CTL restart -l $PG_DATA/server.log
            echo "PostgreSQL restarted"
        else
            $PG_CTL start -l $PG_DATA/server.log
            echo "PostgreSQL started"
        fi
        exit
        ;;

    build)
        v=$2
        # Skip it if we already have it.
        if [ -e "pgsql-$v" ]; then
            echo "PostgreSQL $v already built"
            exit
        fi

        # Switch to the src directory.
        if [ ! -e "src" ]; then
            mkdir src
        fi
        cd src

        # Download the source if wee don't already have it.
        if [ ! -f "postgresql-$v.tar.bz2" ]; then
            curl -fLO http://ftp.postgresql.org/pub/source/v$v/postgresql-$v.tar.bz2
        fi

        # Unpack the source.
        rm -rf "postgresql-$v"
        tar jxf postgresql-$v.tar.bz2
        cd postgresql-$v

        # Patch 8.1.
        if [[ $v =~ ^8\.[01]\. ]]; then
            patch -p1 <<EOF
--- a/src/pl/plperl/plperl.c
+++ b/src/pl/plperl/plperl.c
@@ -694,7 +694,7 @@
 		if (!isGV_with_GP(sv) || !GvCV(sv))
 			continue;
 		SvREFCNT_dec(GvCV(sv)); /* free the CV */
-		GvCV(sv) = NULL;		/* prevent call via GV */
+		GvCV_set(sv, NULL);		/* prevent call via GV */
 	}
 
 	hv_clear(stash);
EOF
        fi

        # prefix is always controlled by pgenv
        CONFIGURE_FLAGS=("--prefix=$PGENV_ROOT/pgsql-$v")

        if [ ! -f $FLAG_FILE ]; then
            # maintain default behavior
            CONFIGURE_FLAGS+=("-with-perl PERL=/usr/bin/perl")
        else
            # parse .pgenv/configure.flags and append each line to the flags
            # that will be passed to configure
            GLOBIGNORE='*' IFS=$'\n' CONFIGURE_FLAGS+=($(cat $FLAG_FILE));
        fi

        # Configure.
        ./configure ${CONFIGURE_FLAGS[@]}

        # make and make install.
        if [ "`echo $v | awk -F . '{print $1}'`" -lt 9 ]; then
            # 8.x doesn't have `make world`.
            make -j3
            make install
            cd contrib
            make -j3
            make install
        else
            # Yay, make world!
            make world -j3
            make install-world
        fi

        echo "PostgreSQL $v built"
        exit
        ;;

    clear)
        if $PG_CTL status &> /dev/null; then
            $PG_CTL stop
            echo "PostgreSQL stopped"
        fi
        if [ -e "pgsql" ]; then
            rm -f pgsql
            echo "PostgreSQL cleared"
        else
            echo "No version of PostgreSQL is currently active"
        fi
        exit
        ;;

    remove)
        v=$2
        if [ ! -e "pgsql-$v" ]; then
            echo "PostgreSQL $v not installed; installed versions:"
            pgversions
            exit 1
        fi

        if [ "`readlink pgsql`" = "pgsql-$v" ]; then
            echo "PostgreSQL $v currently in use"
            echo "Run \`pgenv clear\` to clear it"
            echo "or \`pgenv use\` to switch to another version"
            exit 1
        fi

        rm -fr "pgsql-$v"
        rm -fr src/postgresql-$v.tar.bz2
        rm -fr src/postgresql-$v
        echo "PostgreSQL $v removed"
        exit
        ;;

    version)
        if [ -e "pgsql" ]; then
            readlink pgsql
        else
            echo "No version of PostgreSQL currently in use"
        fi
        exit
        ;;

    ls|versions)
        pgversions
        exit
        ;;

    help)
        pgenvhelp
        exit
        ;;

    *)
        echo "Unknown command \`$1\`"
        pgenvhelp
        exit 1
        ;;
esac
